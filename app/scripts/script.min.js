angular.module("config", []).constant("CONFIG", {
    url: {
        base: "/api",
        login: "/login",
        users: "/users",
        adminAction: "/action"
    }
}).value("debug", true);

(function() {
    angular.module("common.services", [ "ngResource", "config", "ngStorage", "cgNotify" ]);
})();

(function() {
    angular.module("common.services").factory("AllInititivesResource", AllInititivesResource);
    AllInititivesResource.$inject = [ "$q", "$filter", "$timeout", "$q", "$http" ];
    function AllInititivesResource($q, $filter, $timeout, $q, $http) {
        function getInitiatives() {
            var defer = $q.defer();
            $http.get("http://localhost:3000/initiatives").then(function(data) {
                defer.resolve(data);
            }, function(data) {
                defer.reject(data);
            });
            return defer.promise;
        }
        function deleteInitiative(id) {
            var deferred = $q.defer();
            for (var i = 0; i < randomsItems.length; i++) {
                if (randomsItems[i].id == id) {
                    randomsItems.splice(i, 1);
                    debugger;
                    deferred.resolve(randomsItems[i]);
                }
            }
            return deferred.promise;
        }
        return {
            getInitiatives: getInitiatives,
            deleteInitiative: deleteInitiative
        };
    }
})();

(function() {
    var services = angular.module("common.services");
    services.factory("authenticationFactory", [ "$injector", "loginResource", "libFactory", "$rootScope", "authTokenFactory", "$q", "$http", authenticationService ]);
    function authenticationService($injector, loginResource, libFactory, $rootScope, authTokenFactory, $q, $http) {
        function login(username, password) {
            var defer = $q.defer();
            $http.get("http://localhost:3000/users").then(function(data) {
                var keepGoing = true;
                var updateFlag = false;
                var authenticatedUser = [];
                var keepGoing = true;
                authenticationFlag = false;
                activeFlag = true;
                debugger;
                angular.forEach(data.data, function(user, key) {
                    if (activeFlag) {
                        if (keepGoing) {
                            debugger;
                            if (username == user.username && password == user.password) {
                                debugger;
                                authTokenFactory.setUserDetails(user);
                                if (user.status == "Active") {
                                    debugger;
                                    authenticatedUser.push(user);
                                    authenticationFlag = true;
                                    activeFlag = true;
                                    keepGoing = false;
                                    debugger;
                                } else {
                                    activeFlag = false;
                                    authenticationFlag = true;
                                    debugger;
                                    defer.reject(activeFlag);
                                }
                            } else {
                                authenticationFlag = false;
                                debugger;
                            }
                        }
                    } else {
                        defer.reject(activeFlag);
                    }
                });
                if (!authenticationFlag) {
                    defer.reject(authenticationFlag);
                } else {
                    defer.resolve();
                }
            }, function(data) {
                debugger;
                angular.extend(_this, data);
                defer.reject();
            });
            return defer.promise;
        }
        function logout() {
            try {
                authTokenFactory.reset();
            } catch (error) {}
        }
        function getUserDetails() {
            debugger;
            return authTokenFactory.getUserDetails();
        }
        function resetLocalStorage() {
            try {
                authTokenFactory.reset();
            } catch (error) {}
        }
        function getAuthenticationFlag() {
            return authenticationFlag;
        }
        function getActiveFlag() {
            return activeFlag;
        }
        return {
            login: login,
            logout: logout,
            getUserDetails: getUserDetails,
            resetLocalStorage: resetLocalStorage,
            getAuthenticationFlag: getAuthenticationFlag,
            getActiveFlag: getActiveFlag
        };
    }
})();

(function() {
    var services = angular.module("common.services");
    services.factory("authTokenFactory", [ "$localStorage", "libFactory", "$rootScope", authTokenFac ]);
    function authTokenFac($localStorage, libFactory, $rootScope) {
        function getUserDetails() {
            debugger;
            return $localStorage.user;
        }
        function setUserDetails(user) {
            if (!libFactory._.isEmpty(user)) {
                debugger;
                $localStorage.user = user;
            } else {
                delete $localStorage.user;
            }
        }
        function reset() {
            $localStorage.$reset();
        }
        return {
            setUserDetails: setUserDetails,
            getUserDetails: getUserDetails,
            reset: reset
        };
    }
})();

(function() {
    angular.module("common.services").factory("EditProfileResource", EditProfileResource);
    EditProfileResource.$inject = [ "$q", "$http" ];
    function EditProfileResource($q, $http) {
        function updateUser(updatedUser) {
            var defer = $q.defer();
            $http.put("http://localhost:3000/users/" + updatedUser.id, updatedUser).then(function(data) {
                defer.resolve(data);
            }, function(data) {
                defer.reject(data);
            });
            return defer.promise;
        }
        return {
            updateUser: updateUser
        };
    }
})();

(function() {
    var services = angular.module("common.services");
    services.factory("libFactory", [ "$window", "notify", function($window, notify) {
        function notification(message, type) {
            var cssClass = "";
            if (type == "success") {
                cssClass = "alert-success";
            } else if (type == "fail") {
                cssClass = "alert-danger";
            }
            notify({
                message: message,
                classes: cssClass,
                duration: 2e3
            });
        }
        return {
            _: $window._,
            notification: notification
        };
    } ]);
})();

(function() {
    angular.module("common.services").factory("loginResource", [ "$resource", "CONFIG", loginResourceFunc ]);
    function loginResourceFunc($resource, CONFIG) {
        return $resource(CONFIG.url.base + CONFIG.url.login, {}, {
            save: {
                method: "POST",
                isArray: true
            }
        });
    }
})();

(function() {
    angular.module("common.services").factory("MyInititivesResource", MyInititivesResource);
    MyInititivesResource.$inject = [ "$q", "$filter", "$timeout", "$http" ];
    function MyInititivesResource($q, $filter, $timeout, $http) {
        var randomsItems = [];
        var backUnabled = false;
        function getInitiatives() {
            var defer = $q.defer();
            $http.get("http://localhost:3000/initiatives").then(function(data) {
                defer.resolve(data);
            }, function(data) {
                defer.reject(data);
            });
            return defer.promise;
        }
        function addNewInitiative(newInitiative) {
            var defer = $q.defer();
            $http.post("http://localhost:3000/initiatives", newInitiative).then(function(data) {
                defer.resolve();
            }, function(data) {
                defer.reject();
            });
            return defer.promise;
        }
        function deleteInitiative(id) {
            var deferred = $q.defer();
            $http.delete("http://localhost:3000/initiatives/" + id).then(function(data) {
                defer.resolve();
            }, function(data) {
                defer.reject();
            });
            return deferred.promise;
        }
        return {
            addNewInitiative: addNewInitiative,
            deleteInitiative: deleteInitiative,
            getInitiatives: getInitiatives
        };
    }
})();

(function() {
    angular.module("common.services").factory("RegisterUserResource", registerUserResourceFunction);
    registerUserResourceFunction.$inject = [ "$q", "$http" ];
    function registerUserResourceFunction($q, $http) {
        var numberOfUsers = 0;
        function registerUser(newUser) {
            var defferedObj = $q.defer();
            debugger;
            $http.post("http://localhost:3000/users", newUser).then(function(result) {
                debugger;
                defferedObj.resolve(result);
            }, function(response) {
                defferedObj.reject();
            });
            return defferedObj.promise;
        }
        function getUsers() {
            var defer = $q.defer();
            $http.get("http://localhost:3000/users").then(function(data) {
                numberOfUsers = data.data.length;
                defer.resolve(data);
            }, function(data) {
                defer.reject(data);
            });
            return defer.promise;
        }
        return {
            registerUser: registerUser,
            getUsers: getUsers
        };
    }
})();

(function() {
    var services = angular.module("common.services");
    services.factory("fileReader", [ "$q", "$log", fileReader ]);
    function fileReader($q, $log) {
        var onLoad = function(reader, deferred, scope) {
            return function() {
                scope.$apply(function() {
                    deferred.resolve(reader.result);
                });
            };
        };
        var onError = function(reader, deferred, scope) {
            return function() {
                scope.$apply(function() {
                    deferred.reject(reader.result);
                });
            };
        };
        var getReader = function(deferred, scope) {
            var reader = new FileReader();
            reader.onload = onLoad(reader, deferred, scope);
            reader.onerror = onError(reader, deferred, scope);
            return reader;
        };
        var readAsDataURL = function(file, scope) {
            var deferred = $q.defer();
            var reader = getReader(deferred, scope);
            reader.readAsDataURL(file);
            return deferred.promise;
        };
        return {
            readAsDataUrl: readAsDataURL,
            onLoad: onLoad,
            onError: onError,
            getReader: getReader
        };
    }
})();

(function() {
    angular.module("common.services").factory("UserResource", [ "$resource", "CONFIG", UserResource ]);
    function UserResource($resource, CONFIG) {
        debugger;
        return {
            userList: $resource("http://localhost:3000/users", {}, {
                getUsers: {
                    method: "GET",
                    isArray: true
                }
            }),
            adminAction: $resource("http://localhost:3000/users", {}, {
                updateAction: {
                    method: "PUT",
                    isArray: true
                }
            })
        };
    }
})();

(function() {
    angular.module("common.services").factory("UserInitiativesResource", UserInitiativesResource);
    UserInitiativesResource.$inject = [ "$q", "$filter", "$timeout", "$q", "$http", "authTokenFactory" ];
    function UserInitiativesResource($q, $filter, $timeout, $q, $http, authTokenFactory) {
        var randomsItems = [];
        var numberOfInitiatives = 0;
        function getInititatives() {
            var defer = $q.defer();
            $http.get("http://localhost:3000/initiatives").then(function(data) {
                numberOfInitiatives = data.data.length;
                defer.resolve(data);
            }, function(data) {
                defer.reject(data);
            });
            return defer.promise;
        }
        function followInitiative(id) {
            var defer = $q.defer();
            var userid = parseInt(authTokenFactory.getUserDetails().id);
            debugger;
            $http.get("http://localhost:3000/users/" + parseInt(userid)).then(function(data) {
                var ObjeToUpdate = data.data;
                ObjeToUpdate.initiativesFollowed.push(parseInt(id));
                parseInt(ObjeToUpdate.noOfUsersFollowing);
                $http.put("http://localhost:3000/users/" + userid, JSON.stringify(ObjeToUpdate)).then(function(userData) {
                    $http.get("http://localhost:3000/initiatives/" + parseInt(id)).then(function(initiativeData) {
                        var ObjeToUpdateInitiative = initiativeData.data;
                        debugger;
                        ObjeToUpdateInitiative.noOfUsersFollowing = parseInt(ObjeToUpdateInitiative.noOfUsersFollowing) + 1;
                        debugger;
                        $http.put("http://localhost:3000/initiatives/" + parseInt(id), ObjeToUpdateInitiative).then(function(initiative_result) {
                            defer.resolve(initiative_result);
                            debugger;
                        }, function(data) {
                            defer.resolve(initiative_result);
                            debugger;
                        });
                        defer.resolve(initiativeData);
                    }, function(error_second_last) {
                        debugger;
                        defer.reject();
                    });
                    defer.resolve(userData);
                }, function(error_third_last) {
                    debugger;
                    defer.reject();
                });
                defer.resolve(data);
            }, function(error_fourth_last) {
                debugger;
                defer.reject();
            });
        }
        return {
            followInitiative: followInitiative,
            getInititatives: getInititatives
        };
    }
})();

(function() {
    "use strict";
    var commonServices = angular.module("common.services");
    commonServices.directive("ngFileSelect", function() {
        return {
            link: function($scope, el) {
                el.bind("change", function(e) {
                    $scope.file = (e.srcElement || e.target).files[0];
                    $scope.getFile();
                });
            }
        };
    });
})();

(function() {
    "use strict";
    var commonServices = angular.module("common.services");
    commonServices.directive("validFile", function() {
        return {
            require: "ngModel",
            link: function(scope, el, attrs, ngModel) {
                el.bind("change", function() {
                    scope.$apply(function() {
                        ngModel.$setViewValue(el.val());
                        ngModel.$render();
                    });
                });
            }
        };
    });
})();

(function() {
    var initiativeTracker = angular.module("initiativeTracker", [ "ngAnimate", "ui.bootstrap", "ui.router", "ngResource", "common.services", "config", "ui.mask" ]);
    initiativeTracker.config(function($stateProvider, $urlRouterProvider, $httpProvider, $compileProvider, $sceDelegateProvider, $qProvider) {
        $urlRouterProvider.otherwise("/home");
        $stateProvider.state("Home", {
            url: "/home",
            templateUrl: "views/home.html"
        });
        $stateProvider.state("RegisterUser", {
            url: "/registerUser",
            templateUrl: "views/registerUser.html"
        });
        $stateProvider.state("ForgotPassword", {
            url: "/forgotPassword",
            templateUrl: "views/forgotPassword.html"
        });
        $stateProvider.state("ResetPassword", {
            url: "/resetPassword",
            templateUrl: "views/resetPassword.html"
        });
        $stateProvider.state("ResetPasswordSuccess", {
            url: "/resetPasswordSuccess",
            templateUrl: "views/resetPasswordSuccess.html"
        });
        $stateProvider.state("Login", {
            url: "/login",
            templateUrl: "views/login.html"
        }).state("App", {
            url: "/app",
            templateUrl: "views/menu.html"
        }).state("App.editProfile", {
            url: "/editProfile",
            templateUrl: "views/editProfile.html"
        }).state("App.UsersInitiative", {
            url: "/userInitiative",
            templateUrl: "/views/User/userInitiatives.html"
        }).state("App.MyInitiative", {
            url: "/myInitiative",
            template: "<div ui-view></div>"
        }).state("App.MyInitiative.AddNewInitiative", {
            url: "/addNewInitiative",
            templateUrl: "/views/User/addNewInitiative.html"
        }).state("App.MyInitiative.AddNewInitiative.Basic", {
            url: "/basic/:title/:desc/:img",
            templateUrl: "/views/User/basic.html"
        }).state("App.MyInitiative.AddNewInitiative.Advanced", {
            url: "/advanced/:title/:desc/:img",
            templateUrl: "/views/User/advanced.html"
        }).state("App.MyInitiative.AddNewInitiative.Preview", {
            url: "/preview/:title/:desc/:img",
            templateUrl: "/views/User/preview.html"
        }).state("App.MyInitiative.Dashboard", {
            url: "/dashboard",
            templateUrl: "/views/User/myInitiatives.html"
        }).state("App.AllInitiative", {
            url: "/allInitiative",
            templateUrl: "/views/Administrator/initiatives.html"
        }).state("App.Users", {
            url: "/users",
            templateUrl: "/views/Administrator/users.html"
        });
        $qProvider.errorOnUnhandledRejections(false);
    });
    initiativeTracker.run(function($rootScope) {
        $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {});
    });
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("EditProfileController", EditProfileController);
    EditProfileController.$inject = [ "$scope", "$state", "authTokenFactory", "EditProfileResource", "fileReader" ];
    function EditProfileController($scope, $state, authTokenFactory, EditProfileResource, fileReader) {
        var self = this;
        self.user = {};
        angular.copy(authTokenFactory.getUserDetails(), self.user);
        if (!authTokenFactory.getUserDetails().imageSrc) {
            self.user.imageSrc = "../../images/user_1.jpg";
        }
        self.update = function(updatedUser) {
            var img = document.getElementById("imageid");
            if (img.clientWidth > 134 || img.clientHeight > 175) {
                alert("Oops! Due to storage capacity and good user experience we strongly recommend you to upload the image of leser size: e.g. : 134*175 To see updated changes please logou and login again");
            }
            EditProfileResource.updateUser(updatedUser).then(function success(result) {
                authTokenFactory.setUserDetails(result.data);
                alert("Profile updated successfully!");
            });
        };
        $scope.getFile = function() {
            fileReader.readAsDataUrl($scope.file, $scope).then(function(result) {
                self.user.imageSrc = result;
                debugger;
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("ForgotPasswordController", ForgotPasswordControllerFunction);
    ForgotPasswordControllerFunction.$inject = [ "$scope", "$http", "$state", "RegisterUserResource", "EditProfileResource", "authTokenFactory" ];
    function ForgotPasswordControllerFunction($scope, $http, $state, RegisterUserResource, EditProfileResource, authTokenFactory) {
        var self = this;
        self.recover = function() {
            self.autherizationFailed = false;
            var autherizationFlag = false;
            RegisterUserResource.getUsers().then(function success(result) {
                angular.forEach(result.data, function(user, id) {
                    debugger;
                    if (user.username == self.recoveryUsername && user.contactNo == self.reoveryContact) {
                        authTokenFactory.setUserDetails(user);
                        debugger;
                        $state.go("ResetPassword");
                        autherizationFlag = true;
                    } else {
                        autherizationFlag = false;
                    }
                });
                if (autherizationFlag) {
                    self.autherizationFailed = false;
                } else {
                    self.autherizationFailed = true;
                }
            });
        };
        self.recoverAndLogin = function() {
            RegisterUserResource.getUsers().then(function success(result) {
                var userC = authTokenFactory.getUserDetails();
                var username = userC.username;
                var contactNo = userC.contactNo;
                angular.forEach(result.data, function(user, id) {
                    debugger;
                    if (user.username == username && user.contactNo == contactNo) {
                        user.password = self.recoveryPassword;
                        debugger;
                        EditProfileResource.updateUser(user).then(function success(result) {
                            $state.go("ResetPasswordSuccess");
                        });
                    }
                });
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("HomeController", homeControllerFunction);
    homeControllerFunction.$inject = [ "$scope", "$http", "$state", "MyInititivesResource", "$anchorScroll", "$location" ];
    function homeControllerFunction($scope, $http, $state, MyInititivesResource, $anchorScroll, $location) {
        var self = this;
        self.login = function() {
            $state.go("Login");
        };
        self.signup = function() {
            $state.go("RegisterUser");
        };
        self.scrollTo = function(id) {
            $location.hash(id);
            $anchorScroll();
        };
        self.myInterval = 3e3;
        self.slides = [ {
            image: "http://lorempixel.com/400/200/"
        }, {
            image: "http://lorempixel.com/400/200/food"
        }, {
            image: "http://lorempixel.com/400/200/sports"
        }, {
            image: "http://lorempixel.com/400/200/people"
        } ];
        self.initiatives = [];
        MyInititivesResource.getInitiatives().then(function(result) {
            for (var i = 0; i < 3; i++) {
                self.initiatives.push(result.data[i]);
            }
        }, function() {});
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("LoginController", LoginControllerFunction);
    LoginControllerFunction.$inject = [ "$scope", "$state", "authenticationFactory", "libFactory", "authTokenFactory", "$q", "$http" ];
    function LoginControllerFunction($scope, $state, authenticationFactory, libFactory, authTokenFactory, $q, $http) {
        debugger;
        var self = this;
        self.login = login;
        self.isSigningIn = true;
        self.loginFailed = false;
        self.blockedUser = false;
        function login() {
            debugger;
            authenticationFactory.login(self.credentials.username, self.credentials.password).then(function success(response) {
                self.isSigningIn = false;
                self.user = authTokenFactory.getUserDetails();
                debugger;
                if (self.user.role == "user") {
                    debugger;
                    $state.go("App.UsersInitiative");
                } else if (self.user.role == "administrator") {
                    debugger;
                    $state.go("App.AllInitiative");
                }
            }, function error(response) {
                self.isSigningIn = false;
                self.loginFailed = true;
                if (!authenticationFactory.getAuthenticationFlag()) {
                    self.loginFailed = true;
                    self.blockedUser = false;
                    debugger;
                } else if (!authenticationFactory.getActiveFlag()) {
                    self.blockedUser = true;
                    self.loginFailed = false;
                    debugger;
                }
            });
        }
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("MainController", MainControllerFunction);
    MainControllerFunction.$inject = [ "$scope", "$state", "authTokenFactory", "authenticationFactory" ];
    function MainControllerFunction($scope, $state, authTokenFactory, authenticationFactory) {
        var self = this;
        self.user = authTokenFactory.getUserDetails();
        debugger;
        self.logout = function() {
            authenticationFactory.logout();
            $state.go("Login");
        };
        self.editProfile = function() {
            $state.go("App.editProfile");
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("RegisterUserController", RegisterUserController);
    RegisterUserController.$inject = [ "$state", "authTokenFactory", "RegisterUserResource", "fileReader", "$scope" ];
    function RegisterUserController($state, authTokenFactory, RegisterUserResource, fileReader, $scope) {
        var self = this;
        self.user = {};
        self.registerUser = function() {
            RegisterUserResource.getUsers().then(function success(result) {
                self.user.role = "user";
                self.user.status = "Active";
                self.user.action = "Block";
                self.user.initiativesFollowed = [];
                self.user.id = parseInt(result.data.length) + 1;
                console.log("New User to be created" + JSON.stringify(self.user));
                RegisterUserResource.registerUser(self.user).then(function success(result) {
                    alert("Profile Created successfully! Please Login to explore world of initiatives");
                    $state.go("Login");
                });
            });
        };
        $scope.getFile = function() {
            fileReader.readAsDataUrl($scope.file, $scope).then(function(result) {
                self.user.imageSrc = result;
                debugger;
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("initiativesController", initiativesController);
    initiativesController.$inject = [ "$scope", "$state", "AllInititivesResource", "$uibModal", "$q", "$http", "MyInititivesResource" ];
    function initiativesController($scope, $state, AllInititivesResource, $uibModal, $q, $http, MyInititivesResource) {
        var initiativesCtrl = this;
        initiativesCtrl.displayed = [];
        initiativesCtrl.getInitiatives = function() {
            AllInititivesResource.getInitiatives().then(function(result) {
                initiativesCtrl.displayed = result.data;
            });
        };
        initiativesCtrl.deleteInitiative = function(id) {
            MyInititivesResource.deleteInitiative(id).then(function(result) {
                debugger;
                initiativesCtrl.getInitiatives();
            });
        };
        initiativesCtrl.openPopup = function(ImageData) {
            var modalInstance = $uibModal.open({
                templateUrl: "/components/users/popup.html",
                controller: "popUpController as ctrl",
                resolve: {
                    img: function() {
                        return ImageData;
                    }
                }
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("usersController", usersController);
    usersController.$inject = [ "$scope", "$state", "UserResource", "$q", "$http" ];
    function usersController($scope, $state, UserResource, $q, $http) {
        var usersCtrl = this;
        usersCtrl.getUsers = function() {
            usersCtrl.isLoading = true;
            usersCtrl.noRecords = false;
            UserResource.userList.getUsers({}, function success(response, headers) {
                usersCtrl.displayed = [];
                debugger;
                angular.forEach(response, function(user, key) {
                    if (user.role == "user") {
                        debugger;
                        usersCtrl.displayed.push(user);
                    }
                });
            }, function error(response) {});
        };
        usersCtrl.adminAction = function(id) {
            var defer = $q.defer();
            $http.get("http://localhost:3000/users/" + parseInt(id)).then(function(data) {
                var ObjeToUpdate = data.data;
                debugger;
                console.log("object to update:" + JSON.stringify(ObjeToUpdate));
                if (ObjeToUpdate.status == "Active") {
                    ObjeToUpdate.status = "Inactive";
                    ObjeToUpdate.action = "Unblock";
                } else if (ObjeToUpdate.status == "Inactive") {
                    ObjeToUpdate.status = "Active";
                    ObjeToUpdate.action = "Block";
                }
                console.log("object after update:" + JSON.stringify(ObjeToUpdate));
                $http.put("http://localhost:3000/users/" + id, JSON.stringify(ObjeToUpdate)).then(function(data) {
                    console.log("data from Json file updated success:" + JSON.stringify(data));
                    usersCtrl.getUsers();
                    defer.resolve();
                }, function(data) {
                    debugger;
                    defer.reject();
                });
                defer.resolve();
            }, function(data) {
                debugger;
                defer.reject();
            });
            return defer.promise;
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("AdvanceController", AdvanceController);
    AdvanceController.$inject = [ "$scope", "$state", "$stateParams", "MyInititivesResource", "fileReader" ];
    function AdvanceController($scope, $state, $stateParams, MyInititivesResource, fileReader) {
        var self = this;
        var basicInfo = {
            title: $stateParams.title,
            desc: $stateParams.desc
        };
        if (MyInititivesResource.backUnabled) {
            self.imageSrc = $stateParams.img;
            self.filename = $stateParams.img;
            debugger;
        }
        self.gotoNextTab = function() {
            $state.go("App.MyInitiative.AddNewInitiative.Preview", {
                title: basicInfo.title,
                desc: basicInfo.desc,
                img: basicInfo.img
            });
        };
        self.gotoPreviousTab = function() {
            MyInititivesResource.backUnabled = true;
            $state.go("App.MyInitiative.AddNewInitiative.Basic", {
                title: basicInfo.title,
                desc: basicInfo.desc,
                img: basicInfo.img
            });
        };
        $scope.getFile = function() {
            fileReader.readAsDataUrl($scope.file, $scope).then(function(result) {
                self.imageSrc = result;
                if ($stateParams.img) {
                    basicInfo.img = $stateParams.img;
                    debugger;
                } else {
                    basicInfo.img = self.imageSrc;
                    debugger;
                }
                debugger;
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("BasicController", BasicControllerFunction);
    BasicControllerFunction.$inject = [ "$scope", "$state", "MyInititivesResource", "$stateParams", "$uibModal" ];
    function BasicControllerFunction($scope, $state, MyInititivesResource, $stateParams, $uibModal) {
        var self = this;
        self.basicInfo = {};
        if (MyInititivesResource.backUnabled) {
            self.basicInfo.title = $stateParams.title;
            self.basicInfo.desc = $stateParams.desc;
            if ($stateParams.img) {
                self.basicInfo.img = $stateParams.img;
                debugger;
            }
        }
        self.gotoNextTab = function() {
            $state.go("App.MyInitiative.AddNewInitiative.Advanced", {
                title: self.basicInfo.title,
                desc: self.basicInfo.desc,
                img: self.basicInfo.img
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("myInitiativesController", myInitiativesController);
    myInitiativesController.$inject = [ "$scope", "$state", "MyInititivesResource", "$uibModal", "authTokenFactory", "$http" ];
    function myInitiativesController($scope, $state, MyInititivesResource, $uibModal, authTokenFactory, $http) {
        var myInitiativesCtrl = this;
        myInitiativesCtrl.displayed = [];
        myInitiativesCtrl.noInitiativeMessage = true;
        myInitiativesCtrl.status = {
            open: false
        };
        myInitiativesCtrl.getInitiatives = function() {
            $http.get("http://localhost:3000/initiatives").then(function(data) {
                console.log("all initiatives in controller of my initiatives:" + JSON.stringify(data.data));
                var userId = parseInt(authTokenFactory.getUserDetails().id);
                angular.forEach(data.data, function(initiative, key) {
                    if (userId == parseInt(initiative.createdBy)) {
                        myInitiativesCtrl.displayed.push(initiative);
                    }
                    debugger;
                });
                if (parseInt(myInitiativesCtrl.displayed.length) == 0) {
                    myInitiativesCtrl.noInitiativeMessage = false;
                    debugger;
                } else {
                    myInitiativesCtrl.noInitiativeMessage = true;
                    debugger;
                }
            }, function(data) {});
        };
        myInitiativesCtrl.deleteInitiative = function(id) {
            MyInititivesResource.deleteInitiative(id).then(function(result) {
                debugger;
            });
        };
        myInitiativesCtrl.openPopup = function(ImageData) {
            var modalInstance = $uibModal.open({
                templateUrl: "/components/users/popup.html",
                controller: "popUpController as ctrl",
                resolve: {
                    img: function() {
                        return ImageData;
                    }
                }
            });
        };
    }
})();

(function() {
    angular.module("initiativeTracker").controller("popUpController", popUpController);
    popUpController.$inject = [ "$scope", "$uibModalInstance", "img" ];
    function popUpController($scope, $uibModalInstance, img) {
        var popUpController = this;
        popUpController.img = img;
        popUpController.ok = function() {
            debugger;
            $uibModalInstance.close();
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("PreviewController", PreviewControllerFunction);
    PreviewControllerFunction.$inject = [ "$scope", "$state", "$stateParams", "MyInititivesResource", "UserResource", "authTokenFactory", "UserInitiativesResource" ];
    function PreviewControllerFunction($scope, $state, $stateParams, MyInititivesResource, UserResource, authTokenFactory, UserInitiativesResource) {
        var self = this;
        self.newInitiative = {};
        self.newInitiative.title = $stateParams.title;
        self.newInitiative.desc = $stateParams.desc;
        self.newInitiative.img = $stateParams.img;
        self.newInitiative.isDeleted = "Delete";
        self.newInitiative.createdBy = parseInt(authTokenFactory.getUserDetails().id);
        self.newInitiative.id = parseInt(UserInitiativesResource.numberOfInitiatives);
        self.newInitiative.status = "follow", self.newInitiative.noOfUsersFollowing = 0;
        debugger;
        self.cancel = function() {
            UserResource.backUnabled = false;
            $state.go("App.MyInitiative.Dashboard");
        };
        self.share = function() {
            UserResource.backUnabled = false;
            debugger;
            MyInititivesResource.addNewInitiative(self.newInitiative).then(function(result) {
                $state.go("App.MyInitiative.Dashboard");
            });
        };
        self.gotoPreviousTab = function() {
            UserResource.backUnabled = true;
            $state.go("App.MyInitiative.AddNewInitiative.Advanced", {
                title: $stateParams.title,
                desc: $stateParams.desc,
                img: $stateParams.img
            });
        };
    }
})();

(function() {
    "use strict";
    angular.module("initiativeTracker").controller("userInitiativesController", userInitiativesController);
    userInitiativesController.$inject = [ "$scope", "$state", "UserInitiativesResource", "$uibModal", "$q", "$http", "authTokenFactory" ];
    function userInitiativesController($scope, $state, UserInitiativesResource, $uibModal, $q, $http, authTokenFactory) {
        var userInitiativesCtrl = this;
        userInitiativesCtrl.displayed = [];
        userInitiativesCtrl.getInitiatives = function() {
            UserInitiativesResource.getInititatives().then(function success(result) {
                var userId = parseInt(authTokenFactory.getUserDetails().id);
                angular.forEach(result.data, function(initiative, key) {
                    if (userId != parseInt(initiative.createdBy)) {
                        userInitiativesCtrl.displayed.push(initiative);
                    }
                    debugger;
                });
            });
        };
        userInitiativesCtrl.followInitiative = function(id) {
            UserInitiativesResource.followInitiative(id).then(function(result) {
                userInitiativesCtrl.getInitiatives();
            });
        };
    }
})();